function escapeRegExp(str: string) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
}

function buildPatternPart(combination: ReadonlyArray<string>) {
  let patternPart = ''
  for (const token of combination) {
    if (token === '') 
      continue
    
    if (patternPart !== '') 
      patternPart += '\\s*'
    
    patternPart += token
  }
  return patternPart
}

function generateTargetNamePattern(targetName: string) {
  const tokens = targetName.match(/\w+|[^\s\w]+/g) || []

  const wordReplacements: Array<ReadonlyArray<string>> = []

  const connectorSet = new Set(['&', 'and', 'n', ''] as const)

  for (const token of tokens) {
    if (/\w+/.test(token)) {
      const fullWord = escapeRegExp(token)
      const abbreviation = escapeRegExp(token.charAt(0))
      wordReplacements.push([fullWord, abbreviation])
    } else {
      if (token.trim() === '&') {
        const connectorsEscaped = Array.from(connectorSet).map(conn => escapeRegExp(conn))
        wordReplacements.push(connectorsEscaped)
      } else 
        wordReplacements.push([escapeRegExp(token)])
    
    }
  }

  function cartesianProduct(arr: ReadonlyArray<ReadonlyArray<string>>) {
    return arr.reduce<ReadonlyArray<Array<string>>>(
      (a, b) => a.flatMap(d => b.map(e => [...d, e])),
      [[]]
    )
  }

  const allCombinations = cartesianProduct(wordReplacements)

  const patternParts: Array<string> = []

  for (const combination of allCombinations) {
    const patternPart = buildPatternPart(combination)
    patternParts.push(patternPart)
  }

  const uniquePatternParts = Array.from(new Set(patternParts))

  const pattern = uniquePatternParts.join('|')

  return new RegExp(pattern, 'gi')
}

function highlightTargetName(text: string, targetName: string): string {
  return text.replace(generateTargetNamePattern(targetName), match => `<span>${match}</span>`)
}

function testHighlightTargetName() {
  const targetName = 'AAAA & BBBBB'
  const text =
    'This is a text mentioning AAAA & BBBBB, AAAA and BBBBB, A&B, and AnB.'
  const expected =
    'This is a text mentioning <span>AAAA & BBBBB</span>, <span>AAAA and BBBBB</span>, <span>A&B</span>, and <span>AnB</span>.'
  const result = highlightTargetName(text, targetName)
  console.log(result === expected ? 'Test passed' : 'Test failed')
  console.log('Result:', result)
}

testHighlightTargetName()
